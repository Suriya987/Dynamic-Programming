Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) 
deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.



        class Solution {
public:
int solve(string&a,string&b,int i,int j,vector<vector<int>>&dp){
    //base case
    if(i==a.size())
    return 0;

if(j==b.size())
    return 0;
if(dp[i][j]!=-1)
return dp[i][j];
int ans=0;
if(a[i]==b[j]){
    ans=1+solve(a,b,i+1,j+1,dp);
}
else{
    ans=max(solve(a,b,i+1,j,dp),solve(a,b,i,j+1,dp));
}
dp[i][j]=ans;
return dp[i][j];
}

    int longestCommonSubsequence(string text1, string text2) {
        vector<vector<int>>dp(text1.size(),vector<int>(text2.size(),-1));
   return solve(text1,text2,0,0,dp);
        
    }
};

{{ STRIVER APPROACH - TOP DOWN }}

  class Solution {
   public:
       int func(int ind1,int ind2,string text1,string text2,vector<vector<int>>&dp)
     {
           //base case 
             //whenever any index is going  less than the 0th index
             if(ind1<0 || ind2<0)
               return 0 ;  //becoz there is no more lengths are going to present so just return the 0;

             //check if the current position is computed or not
             if(dp[ind1][ind2]!=-1)  return dp[ind1][ind2];

           //possiblities for index
           if(text1[ind1]==text2[ind2])
              return dp[ind1][ind2]=1+func(ind1-1,ind2-1,text1,text2,dp);    // of the current characters are matched we dont want
              //to do any more below func just return .
        
           return dp[ind1][ind2]=0+max(func(ind1-1,ind2,text1,text2,dp),func(ind1,ind2-1,text1,text2,dp));
       }
       int longestCommonSubsequence(string text1, string text2) {
            int ind1=text1.size();
            int ind2=text2.size();
            //creating 2d vector for memoization
            vector<vector<int>>dp(ind1,vector<int>(ind2+1,-1));
            return func(ind1-1,ind2-1,text1,text2,dp);
       }
   };

{{ FAILED APPROACH }}

/*
  //   if(ind1==0)
        //   {
        //     if()
        //   }
        //base case
         //  if(ind1 == 0 || ind2 == 0)

        //  if(text1[ind1]==text2[ind2])  
        //   return 1;
         // if(ind1==0 || text1[ind1]==text2[ind2])  return 1;

           if(ind1==0)
           {
              if(text1[ind1]==text2[ind2]) return 1;
              else return 0;
           }

        //    if(text1[ind1]==text2[ind2])  return 1;


           //try every possible  moves on that index
            int pick=0;
            int notPick=0;
            if(text1[ind1]==text2[ind2])
            {
               pick=1+func(ind1-1,ind2-1,text1,text2);
            }
            else 
            {
               notPick=0+func(ind1-1,ind2,text1,text2);
            }

            return pick+notPick;
    }
*/


