Source : Leetcode

You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, 
the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and
it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

Example 1:

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.
Example 2:

Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
Total amount you can rob = 2 + 9 + 1 = 12.


Soln :  (Top down Approach  using recursion)

Time Complexity : O(2^N)
Space Complexity : O(N)+O(N)

O(N) -> Recursion stack space
O(N) -> Vector size

class Solution {
     int Dp(vector<int>&num,int ind,vector<int>& vc)
     {
        //base case
         if(ind==0)
            return num[0];
         if(ind<0)  return 0;
         
         //checking whether it is already computed or not
          if(vc[ind]!=-1) return vc[ind];

        int pick = num[ind]+Dp(num,ind-2,vc);
        int Npick = 0 + Dp(num,ind-1,vc);
    
        return vc[ind]=max(pick,Npick);

     }
public:
    int rob(vector<int>& nums) {

          int n=nums.size();
          vector<int> vc(n,-1);
           return Dp(nums,n-1,vc);
    }
};

Soln 2 : (bottom up approach)

Time Complexity : O(N)
Space Complexity : O(N)


    class Solution {
    public:
    int rob(vector<int>& nums) 
     {
        //bottom up approach
          int n= nums.size();
        vector<int> Dp (n,-1);
        
         Dp[0]=nums[0];

         for(int i=1;i<n;i++)
         {
            int pick = nums[i];
             if(i>1)
                pick+=Dp[i-2];
            int Npick = 0+Dp[i-1];

            Dp[i]=max(pick,Npick);
               
         }

         return Dp[n-1];
     }
};

Optimised Approach :

Time Complexity : O(N)
Space Complexity : O(1)

    class Solution {
    public:
    int rob(vector<int>& nums) 
     {
        //bottom up approach
          int n= nums.size();

        
         int prev =nums[0];
          int prev1=0;

         for(int i=1;i<n;i++)
         {
            int pick = nums[i];
             if(i>1)
                pick+=prev1;
            int Npick = 0+prev;

            int curr = max(pick,Npick);
            prev1=prev;
            prev=curr;
               
         }

         return prev;
     }
};
