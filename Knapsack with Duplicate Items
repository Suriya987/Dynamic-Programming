Source : GFG

Given a set of N items, each with a weight and a value, represented by the array w and val respectively. Also, a knapsack with weight limit W.
The task is to fill the knapsack in such a way that we can get the maximum profit. Return the maximum profit.
Note: Each item can be taken any number of times.

Example 1:

Input: 
N = 2
W = 3
val = {1, 1}
wt = {2, 1}
Output: 
3
Explanation: 
1.Pick the 2nd element thrice.
2.Total profit = 1 + 1 + 1 = 3. Also the total weight = 1 + 1 + 1  = 3 which is <= 3.
Example 2:

Input: 
N = 4
W = 8
val[] = {6, 1, 7, 7}
wt[] = {1, 3, 4, 5}
Output: 
48
Explanation: 
The optimal choice is to pick the 1st element 8 times.


Approach : Recursion and Memoization

Time Complexity : O(N*W) 
  Why W ? we have to wait for the value to be reduce . so

Space Complexity : O(N*W) + O(N) 

class Solution{
public:
    int func(int ind,int weight,int val[],int wt[],vector<vector<int>>&dp)
    {
      //  if(weight==0)  return 0;
        //base case
        if(ind==0)
        {
            //we may have two options
            //if(wt[ind]<=weight)    { Mistake i've done }
            
            // { crct one } 
            
/* if we are in the last index we might have chance of pick max element in this
 0Th index  Ex:  weight available is 5  but the current index weight is 2
 we have the options to pick max times right
 so that's why .  (5/2) =2  we pick 2 times the current index value. */
            
              return (weight/wt[ind])*val[ind];
             
        }
        
        //if already computed use this
          if(dp[ind][weight]!=-1)  return dp[ind][weight];
        // we have two options 
        int notPick=0+func(ind-1,weight,val,wt,dp);
        int pick=INT_MIN;
        if(wt[ind]<=weight)
        {
            pick=val[ind]+func(ind,weight-wt[ind],val,wt,dp);
        }
        
        return dp[ind][weight]=max(notPick,pick);
        
    }
    int knapSack(int N, int W, int val[], int wt[])
    {
        vector<vector<int>> dp(N,vector<int>(W+1,-1));
          return func(N-1,W,val,wt,dp);
    }
};
