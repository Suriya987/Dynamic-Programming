Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.


Time complexity : O(NxM)
how ?
now what i am assuming is outer loop run for O(row) + inner loop is O(M) once it is ran another histogram loop is ran . 
which O(M) outler loop and inner it is O(M) but not exactly due to single push and pop for each .
so O(N) inner loop O(M)+O(M)+O(M) is consolidated to O(M) so O(NxM) 
Space complexity : O(M) for stack

class Solution {
  public:
    int maxArea(vector<vector<int>> &mat) {
        
                  int maxi=0;
        int col=mat[0].size();
        int  row=mat.size();
        
        vector<int>arr(col,0);
          
          for(int i=0;i<row;i++)
          {
              for(int j=0;j<col;j++)
              {
                  if(mat[i][j]==1)
                  {
                       arr[j]++;
                  }
                  else
                  arr[j]=0;
                  
              }
              
             
              
              
          
          
         
               
            //   for(int i=0;i<col;i++)
            //   cout<<arr[i]<<" ";
          
          
          
          //find the largest area in histogram
          stack<int>st;

          for(int i=0;i<=col;i++)
          {
              while(!st.empty() && (i==col || arr[st.top()]>=arr[i]))
              {
                  int  currHeight=arr[st.top()];
                  st.pop();
                  
                  int width=0;
                  if(st.empty())
                  width=i;
                  else
                  width=i-st.top()-1;
                  
               //   cout<<"Width "<<width<<"i "<<i <<"st.top() "<<st.top()<<"  ";
                  
                  maxi=max(maxi,currHeight*width);
                 //cout<<maxi<<" ";
              }
              st.push(i);
              
          }
          }
          
          return maxi;
    }
};
