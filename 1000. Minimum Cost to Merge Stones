Brute :

Time complexity : Exponential  ( means each states try out many comnbination that leads to exponential )
Space complexity : O(N)-> each state creating new vector..depending on the calls made

#include <bits/stdc++.h>
using namespace std;

int dfs(vector<int> stones, int K) {
    int n = stones.size();
    if (n == 1) return 0;  // only one pile left â†’ no more cost

    int ans = INT_MAX;

    // Try merging every K consecutive piles
    for (int i = 0; i + K <= n; i++) {
        // cost of merging stones[i..i+K-1]
        int sum = 0;
        for (int j = i; j < i + K; j++) sum += stones[j];

        // Build new array after merging
        vector<int> next;
        for (int j = 0; j < i; j++) next.push_back(stones[j]);
        next.push_back(sum);
        for (int j = i + K; j < n; j++) next.push_back(stones[j]);

        // Recurse on new array
        ans = min(ans, sum + dfs(next, K));
    }
    return ans;
}

int main() {
    vector<int> stones = {3, 2, 4, 1};
    int K = 3;

    // Check feasibility
    if ((stones.size() - 1) % (K - 1) != 0) {
        cout << -1 << endl;  // impossible
    } else {
        cout << dfs(stones, K) << endl;
    }
}
