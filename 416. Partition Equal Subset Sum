Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements 
in both subsets is equal or false otherwise.

Example 1:

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.


approach : Recursive + memoization

Time complexity : O(N*target) + O(N) 
Space complexity : O(N*Target) + O(N)

class Solution {
public:
    bool func(int ind,int target,vector<int>&nums,vector<vector<int>> &memo)
    {
        if(target==0)  return true;
        if(ind==0)  return nums[ind]==target;

        if(memo[ind][target]!=-1)  return memo[ind][target];

        bool take=false;
             if(nums[ind]<=target)
              {
                take=func(ind-1,target-nums[ind],nums,memo);
              }
        bool notTake=func(ind-1,target,nums,memo);

        return memo[ind][target]= take || notTake;
    }
    bool canPartition(vector<int>& nums) {
         
         int n=nums.size();
        
         int totSum=0,target=0;
         for(int i=0;i<n;i++)
         {
            totSum+=nums[i];
         }

         if(totSum%2==0)
         {
              target=totSum/2;
         }
         else
         return false;
           vector<vector<int>> memo(n,vector<int>(totSum,-1));
         return func(n-1,target,nums,memo);
    }
};
