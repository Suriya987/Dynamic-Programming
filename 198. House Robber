You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, 
the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact 
the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

Example 1:

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.
Example 2:

Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
Total amount you can rob = 2 + 9 + 1 = 12.

Soln:  ( Top Down Approach + Memoization )

Time Complexity :  O(2^N)
Space Complexity : O(N)+O(N)

class Solution {
public:
    int findMax(vector<int>& nums , int ind,vector<int>& memo)
    {
        //base case
         if(ind==0)  return nums[ind];

         if(ind<0)  return 0;
          //memoization
            if(memo[ind]!=-1)  return memo[ind];

         int pick=nums[ind]+findMax(nums,ind-2,memo);
         int NotPick=0+findMax(nums,ind-1,memo);

         //assigning the greater computed value 
          memo[ind]=max(pick,NotPick);

         return memo[ind];
    }
    int rob(vector<int>& nums) {
        // i need to start from the either of 2 index 
        // 0th index and 1st index

       vector<int> memo(nums.size(),-1);
         //{-1,-1,-1,-1}
       return findMax(nums,nums.size()-1,memo);



    }
};


/*

        int maxAmount=0;
        for(int i=0;i<2;i++)
        {
            int currSum=0;
            //for looping through every indexs
            for(int j=i;j<nums.size();j++)
            {
                    currSum+=nums[j];
                    j=j+1;
                    if(currSum>maxAmount)
                      maxAmount=currSum;
            }
        }
        return maxAmount;
*/
