Given a string s. In one step you can insert any character at any index of the string.

Return the minimum number of steps to make s palindrome.

A Palindrome String is one that reads the same backward as well as forward.

 

Example 1:

Input: s = "zzazz"
Output: 0
Explanation: The string "zzazz" is already palindrome we do not need any insertions.
Example 2:

Input: s = "mbadm"
Output: 2
Explanation: String can be "mbdadbm" or "mdbabdm".
Example 3:

Input: s = "leetcode"
Output: 5
Explanation: Inserting 5 characters the string becomes "leetcodocteel".

Approach :  Just same as a LCS  
while returning just return the by reducing the total length

Time complexity : O(NxM)
Space complexity : O(NxM)

class Solution {
public:
    int minInsertions(string s) {
                  int len=s.size();
         string s2=s;

           vector<vector<int>>dp(len+1,vector<int>(len+1,-1));
         reverse(s.begin(),s.end());

          //mark the base case
           for(int i=0;i<=len;i++)
           {
             dp[0][i]=0;
           }

            for(int i=0;i<=len;i++)
           {
             dp[i][0]=0;
           }

           for(int i=1;i<=len;i++)
           {
            for(int j=1;j<=len;j++)
            {
                    
                if(s[i-1]==s2[j-1])
                dp[i][j]= 1+dp[i-1][j-1];
                else
                {
                int notMatch=0+max(dp[i][j-1],dp[i-1][j]);

                dp[i][j]=notMatch;
                }
            }
           }
           return len-dp[len][len];
    }
};
