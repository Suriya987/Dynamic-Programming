Given a string s, find the longest palindromic subsequence's length in s.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: s = "bbbab"
Output: 4
Explanation: One possible longest palindromic subsequence is "bbbb".
Example 2:

Input: s = "cbbd"
Output: 2
Explanation: One possible longest palindromic subsequence is "bb".


Tabulation approach

Time complexity : O(NxM)
Space complexity : O(NxM)

class Solution {
public:
  
    int longestPalindromeSubseq(string s) {
         int len=s.size();
         string s2=s;

           vector<vector<int>>dp(len+1,vector<int>(len+1,-1));
         reverse(s.begin(),s.end());

          //mark the base case
           for(int i=0;i<=len;i++)
           {
             dp[0][i]=0;
           }

            for(int i=0;i<=len;i++)
           {
             dp[i][0]=0;
           }

           for(int i=1;i<=len;i++)
           {
            for(int j=1;j<=len;j++)
            {
                    
                if(s[i-1]==s2[j-1])
                dp[i][j]= 1+dp[i-1][j-1];
                else
                {
                int notMatch=0+max(dp[i][j-1],dp[i-1][j]);

                dp[i][j]=notMatch;
                }
            }
           }
           return dp[len][len];


    }
};
