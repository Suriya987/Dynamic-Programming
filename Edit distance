Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')



Soln : Recursive + Memoization

Time Complexity : O(N*M) with memoization
Space complexity : O(N+M) -> Recursive Stack space and O(N*M) for dp

class Solution {
public: 
    int helper(int i,int j,string word1,string word2,vector<vector<int>>&dp)
    {
       //base case
         if(i<0) return j+1;
         if(j<0) return i+1;
         
         if(dp[i][j]!=-1)  return dp[i][j];

         if(word1[i]==word2[j]) return dp[i][j]=helper(i-1,j-1,word1,word2,dp);
        
       int remove=helper(i-1,j,word1,word2,dp);
       int insert=helper(i,j-1,word1,word2,dp);
       int replace =helper(i-1,j-1,word1,word2,dp);

       return dp[i][j]=1+min(replace,min(insert,remove)); 
    }
    int minDistance(string word1, string word2) {
        int n=word1.size();
        int m=word2.size();
        vector<vector<int>>dp(n,vector<int>(m,-1));
         int result=helper(n-1,m-1,word1,word2,dp);
         return result;    
    }
};


Soln: Tabulation

Time complexity : O(NxM)
Space complexity : O(NxM)

    int minDistance(string word1,string word2)
    {
        int n=word1.size();
        int m=word2.size();
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));

        //compute the base case

        for(int j=0;j<=m;j++)
        {
            dp[0][j]=j;  //  assume that is the length of the rem need to insert
        }

        for(int i=0;i<=n;i++)
        {
            dp[i][0]=i; //assume that this much length we need to remove 
        }

        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(word1[i-1]==word2[j-1])
                {
                    dp[i][j]=dp[i-1][j-1];
                }
                else
                {
                    dp[i][j]=1+min(dp[i][j-1],min(dp[i-1][j],dp[i-1][j-1]));
                }
            }
        }
        return dp[n][m];
    }
