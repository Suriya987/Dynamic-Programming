You are given an integer array nums and an integer target.

You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.

 

Example 1:

Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3
Example 2:

Input: nums = [1], target = 1
Output: 1

Approach :

Time complexity : O(2^N) which is exponential
Space Complexity : O(N)

class Solution {
public:
       int ans =0;
    void  f(int ind,int n,int target,vector<int>& arr,int sum)
	{
	    //base case
	      if(target==sum && ind == n)  
          {
             ans++ ;
             return ;
          }
	      else if(ind==n)  return ;
	     
	      
	      //performing stuffs on that index
	      
	    // imdex                   1 1 1 1 1      
           sum=sum+arr[ind];  //sum =  , 
	 f(ind+1,n,target,arr,sum);
       
           sum=sum-2*arr[ind];
      f(ind+1,n,target,arr,sum);	      
	}
    int findTargetSumWays(vector<int>& nums, int target) {
        ans = 0;
        f(0,nums.size(),target,nums,0);
         return  ans;
                 
    }
};

 

