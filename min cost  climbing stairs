746. Min Cost Climbing Stairs

You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.

You can either start from the step with index 0, or the step with index 1.

Return the minimum cost to reach the top of the floor.

INTUITION
    check from the last index so that we can able to find the which one is less cost.

         1,100,1,1,1,100,1,1,100,1 <-> TOP
                                 1  last index is same becoz we move either one or two it reaches top
                            for 100 either it moves 1 step means cost is 101 (100+1)
                                          it  moves 2 steps means  cost is 100  
                                          find the min of these two and store it in the new array which we can use for  further is called Dnamic Programming
                dp[n]=      . .  . . . 2  100   1
                  after finding  evry cost for evry particular indexes
            we need to find which index (0 or 1) gives min cost ?..  thats the question right.
        return min(dp[0],dp[1])

  Time Complexity 
      ~ O(N)  approximately some where around
  Space Complexity                               [$hint]
       O(N)  is used to solve the problem  {dont touch the given data thats why i am created new dp array}
       O(2N)  is used including the given array.
 
class Solution {
public:
  
    int minCostClimbingStairs(vector<int>& cost) {
        if(cost.size()== NULL || cost.size()<1)  return 0;
        if(cost.size()==1)  return cost[0];
        int len=cost.size();
          vector<int> dp(len,0);
          dp[len-1]=cost[len-1];    //why i am storing the last 2 indexes manually means Last two indexes are same when we computing thats why .
          dp[len-2]=cost[len-2];
          for(int i=len-3;i>=0;i--)
          {
            int val=min((cost[i]+dp[i+1]),(cost[i]+dp[i+2]));    //adding the current element with index+1  and index+2
            dp[i]=val;
          }
          return min(dp[0],dp[1]);    //comparirion between first two indexes
    }
};
