Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.

In one step, you can delete exactly one character in either string.

Example 1:

Input: word1 = "sea", word2 = "eat"
Output: 2
Explanation: You need one step to make "sea" to "ea" and another step to make "eat" to "ea".
Example 2:

Input: word1 = "leetcode", word2 = "etco"
Output: 4

Approach :
 Recursive and tabulation 

Time complexity : O(NxM)
space complexity : O(NxM)   //for tabulation

Time complexity : exponential in nature
Space complexity : O(N+M) // for recursion

class Solution {
public:
    int helper(string s1,string s2,int ind1,int ind2)
    {
        //base case
        if(ind1==0 || ind2==0)
          return 0;

        //matching scenerio
          if(s1[ind1-1]==s2[ind2-1])
          return 1+helper(s1,s2,ind1-1,ind2-1);

         int newCount=max(helper(s1,s2,ind1,ind2-1),helper(s1,s2,ind1-1,ind2));

      return newCount;

    }
    int minDistance(string word1, string word2) {
          int n=word1.size();
          int m=word2.size();

            //  int deleteLen=helper(word1,word2,len,len2);
           //  return deleteLen;
           vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
           for(int i=0;i<=n;i++)
             dp[i][0]=0;
           
           for(int j=0;j<=m;j++)
             dp[0][j]=0;

          for(int i=1;i<=n;i++)
          {
            for(int j=1;j<=m;j++)
            {
                 if(word1[i-1]==word2[j-1])
                   dp[i][j]=1+dp[i-1][j-1];
                    else{
               int newCount=max(dp[i][j-1],dp[i-1][j]);
                 dp[i][j]=newCount;
                    }
            }
          }

          int deleteLen=dp[n][m];
        

         return  (n-deleteLen) + (m-deleteLen);
    }
};
