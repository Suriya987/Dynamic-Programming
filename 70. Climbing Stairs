You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step


Soln :  using recurvise and vector 

Time complexity : O(N)
Space Complexity : O(N)+O(N) 
   for using dp vector and recursive stack space 

class Solution {
public:
    int Func(int n,vector<int> &dp)
    {
        if(n==0)  return 1;
        if(n<0) return 0;

        if(dp[n]!=-1)  return dp[n];
       // if(n==1)  return 1;
          int left =Func(n-1,dp);
          int right = Func(n-2,dp);

          return dp[n]=left + right ;
    }
    int climbStairs(int n) {
        vector<int> dp(n+1,-1);
        return Func(n,dp);
    }
};

Optimised tabulation approach

Time complexity : O(N)
Space Complexity : O(1)

class Solution {
 public:  
   int climbStairs(int n) {
         int prev1=1;
         int prev2=1;
        
         for(int i=2;i<=n;i++)
         {
            int  curr=prev1+prev2;
            prev1=prev2;
            prev2=curr;
         }

         return prev2;
   }
};

// 2-1  = 1 
// 1-1 = 0   // return 1

// left = 1
// right = 

// 1-2 =-1  // return 0;

// left=1
// right=0;

// return 1;

// left=1;
// right = 2-2 = 0 return 1;

// return left+right (1+1)
//  return 2;

