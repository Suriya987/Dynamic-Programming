Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example: 1
Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.

Example 2:

Input: grid = [[1,2,3],[4,5,6]]
Output: 12

APPROACH : Recursive + Tabulation

Time complexity : O(N x M) -> recursive calls which is for every index
Space complexity : o(N x M) + O(N)

class Solution {
public:
    //int minPath(vector<vector<int>>&grid,int m,int n,int row,int col,int sum,int rightWards,int downWards,vector<vector<int>>&memo)
    int minPath(int i, int j, vector<vector<int>> &grid,vector<vector<int>>&memo)
    {
     // base case
      if(i==0 && j==0)
        return grid[i][j];
    
     //boundary conditions
       if(i<0 || j<0) return 1e9;

       //check if overlapping subproblems
       if(memo[i][j]!=-1)  return memo[i][j];

       int up=grid[i][j]+minPath(i-1,j,grid,memo);
       int left = grid[i][j]+minPath(i,j-1,grid,memo);

       return memo[i][j]=min(up,left);
         
    }
    int minPathSum(vector<vector<int>>& grid) {

        
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>> memo(m,vector<int>(n,-1));
       
         return minPath(m-1,n-1,grid,memo);
       
    }
};
