Source : GFG 

Geek wants to climb from the 0th stair to the (n-1)th stair. At a time the Geek can climb either one or two steps. 
A height[N] array is also given. Whenever the geek jumps from stair i to stair j, the energy consumed in the jump is abs(height[i]- height[j]),.
where abs() means the absolute difference. 
return the minimum energy that can be used by the Geek to jump from stair 0 to stair N-1.

Input:
n = 4
height = {10 20 30 10}
Output:
20
Explanation:
Geek jump from 1st to 2nd stair(|20-10| = 10 energy lost).
Then a jump from the 2nd to the last stair(|10-20| = 10 energy lost).
so, total energy lost is 20 which is the minimum.

Expected Time Complexity: O(n)
Expected Space Complexity: O(n)


Soln : 

( Recursion + memoization )  ( Top Down approach )

Time complexity : O(N)  (height of the recursive call)
Space Complexity : O(N) + O(N)
  O(N) -> stack space
  O(N) -> dp vector

#include <bits/stdc++.h>

using namespace std;

int solve(int ind, vector<int>& height, vector<int>& dp){
    if(ind==0) return 0;
    if(dp[ind]!=-1) return dp[ind];
    int jumpTwo = INT_MAX;
    int jumpOne= solve(ind-1, height,dp)+ abs(height[ind]-height[ind-1]);
    if(ind>1)
        jumpTwo = solve(ind-2, height,dp)+ abs(height[ind]-height[ind-2]);
    
    return dp[ind]=min(jumpOne, jumpTwo);
}


int main() {

  vector<int> height{30,10,60 , 10 , 60 , 50};
  int n=height.size();
  vector<int> dp(n,-1);
  cout<<solve(n-1,height,dp);
}


Tabulation ( Bottom Up Approach )

Time complexity : O(N)
Space Complexity : O(N)

    int minimumEnergy(vector<int>& height, int n) {

            vector<int> dp(n);
                     
            dp[0]=0;
            for(int i=1;i<n;i++)
            {
                int first = dp[i-1]+abs(height[i]-height[i-1]);
                int sec=INT_MAX;
                if(i>1) {
                    sec=dp[i-2]+abs(height[i]-height[i-2]);
                }
                
                dp[i]=min(first,sec);
            }
            
            return dp[n-1];
}

Space optimised Tabulation approach 

Time complexity : O(N)
Space Complexity : O(1)

    int minimumEnergy(vector<int>& height, int n) {

//if we have prev 2 values we can calculate what we want instead of using  dp vector
            int prev1 = 0; 
            int prev2 = 0;
           
            for(int i=1;i<n;i++)
            {
                int first = prev1+abs(height[i]-height[i-1]);
                int sec=INT_MAX;
                if(i>1) {
                    sec=prev2+abs(height[i]-height[i-2]);
                }
                
                int curr= min(first,sec);
                prev1=prev2;
                prev2=curr;
            }
            return prev2;  // this value always holds the last updated curr so we return it.         
    }
