
You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

You may assume that you have an infinite number of each kind of coin.

 

Example 1:

Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1
Example 2:

Input: coins = [2], amount = 3
Output: -1
Example 3:

Input: coins = [1], amount = 0
Output: 0
 

Constraints:

1 <= coins.length <= 12
1 <= coins[i] <= 231 - 1
0 <= amount <= 104

Approach : Recursive and memoization

Time complexity Brute force : O(M^N)
Space complexity : O(N)

Better using memo

Time complexity : O(N*M)
Space complexity : O(N)+O(N)


class Solution {
    public:
   // vector<int>dp;
     long find(vector<int>&coins,int sum,vector<int>&dp)
     {
        
        if(sum==0) return 0;
        if(sum<0)  return INT_MAX;
         
         if(dp[sum]!=-1) return dp[sum];

         long  Result=INT_MAX;
         for(int i=0;i<coins.size();i++)
         {
           long currRes=find(coins,sum-coins[i],dp);
             
                 Result=min(1+currRes,Result);

           // long currRes=find(coins,sum-coins[i],dp);
             
              //   Result=min(1+find(coins,sum-coins[i],dp),Result);
         }
     
         return dp[sum]=Result;
     }
     public:
     int coinChange(vector<int>& coins, int amount) {
        //dp.resize(amount+1,-1);
        vector<int>dp(amount+1,-1);
        int result=find(coins,amount,dp);
        return  result==INT_MAX?-1:result;
     }
};
