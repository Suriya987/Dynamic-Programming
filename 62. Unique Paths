There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). 
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

Example 1:
 Input: m = 3, n = 7
Output: 28

Example 2:

Input: m = 3, n = 2
Output: 3

Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down

 Approach : Top Down 

Time complexity
    O(M*N)
Reason: At max, there will be M*N calls of recursion.

Space Complexity: 
  O((N-1)+(M-1)) + O(M*N)
Reason: We are using a recursion stack space: O((N-1)+(M-1)), here (N-1)+(M-1) is the path length and an external DP Array of size ‘M*N’.

class Solution {
public:
      int uniq(int i,int j, vector<vector<int>> &memo)
      {
        //base case
          if(i==0 && j==0) 
            return 1;

        if(i<0 || j<0)  
           return 0;

         if(memo[i][j]!=-1)  return memo[i][j];

     int up=uniq(i-1,j,memo);
     int left=uniq(i,j-1,memo);

    return memo[i][j]=up+left;

}
      int uniquePaths(int m , int n)
      {
        vector<vector<int>> memo(m,vector<int>(n,-1));
        return  uniq(m-1,n-1,memo);
      }
};


// Previous code 


//     int Unique(int bottom,int right,int row,int col,vector<vector<int>> &memo)
//     {
//         //base case
//          if(bottom == row && right== col )
//           {
//             return 1;  // found  1 path
//           }

//           //boundaryb condition
//           if(right>col)
//             return 0;
//           if(bottom>row)
//             return 0;

//         //check if the path is already computed
//         if(memo[bottom][right] != -1)  return memo[bottom][right];
        
//         // int rightwards = Unique(bottom,right+1,row,col,memo);
//         // int downwards  = Unique(bottom+1,right,row,col,memo);
//         return  memo[bottom][right]=Unique(bottom,right+1,row,col,memo)+Unique(bottom+1,right,row,col,memo);
//         //return memo[bottom][right]=rightwards+downwards;
//     }
//     int uniquePaths(int m, int n) {
//         //int row = 4; int col = 3; vector<vector<int>> v2d(row, vector<int>(col, 0)); 
//         // declare a 2d vector of size row*col and initialize all elements to 0.
//         vector<vector<int>> memo(m,vector<int>(n,-1));
//         return Unique(1,1,m,n,memo);
//     }
// };

// int countWaysUtil(int i, int j, vector<vector<int>>& dp) {
//     // Base case: If we reach the top-left corner (0, 0), there is one way.
//     if (i == 0 && j == 0)
//         return 1;

//     // If we go out of bounds or reach a blocked cell, there are no ways.
//     if (i < 0 || j < 0)
//         return 0;

//     // If we have already computed the number of ways for this cell, return it.
//     if (dp[i][j] != -1)
//         return dp[i][j];

//     // Calculate the number of ways by moving up and left recursively.
//     int up = countWaysUtil(i - 1, j, dp);
//     int left = countWaysUtil(i, j - 1, dp);

//     // Store the result in the dp table and return it.
//     return dp[i][j] = up + left;
// }

// // Function to count the number of ways to reach the bottom-right cell (m-1, n-1)
// // from the top-left cell (0, 0) in a grid of size m x n
// int countWays(int m, int n) {
//     // Create a memoization table (dp) to store the results of subproblems.
//     vector<vector<int>> dp(m, vector<int>(n, -1));

//     // Call the utility function with the bottom-right cell as the starting point.
//     return countWaysUtil(m - 1, n - 1, dp);
// }
