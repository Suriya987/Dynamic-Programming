You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]).
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.

Return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The testcases are generated so that the answer will be less than or equal to 2 * 109.

 

Example 1:


Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right
Example 2:


Input: obstacleGrid = [[0,1],[0,0]]
Output: 1



Approach :

Memoization

Time complexity : O(N*M)
Space Complexity : O(N*M) + O(N) + O(M)

class Solution {
public:
    int uniq(int top , int left , vector<vector<int>> &memo,vector<vector<int>>&obstacleGrid)
    {
        //base case
          if(top==0 && left==0)
          {
            if(obstacleGrid[top][left]==0) 
            return 1;
            else
              return 0;
          }
        
        //boundary
            if(top<0 || left<0)
               return 0;
        
        //if obstacle is on the way
           if(obstacleGrid[top][left]==1)
              return 0;
        // memoization
         if(memo[top][left]!=-1)
           return memo[top][left];
        
        int upwards = uniq(top-1,left,memo,obstacleGrid);
        int leftwards  = uniq(top,left-1,memo,obstacleGrid);
    
     return memo[top][left]=upwards+leftwards;
         
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
       //   return m;
        // if(m==1 && n==1 && obstacleGrid[0][0]==1)
        //    return 0;
        

         vector<vector<int>> memo (m,vector<int>(n,-1));

         return uniq(m-1,n-1,memo,obstacleGrid);
    }
};
 
