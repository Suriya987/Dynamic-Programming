Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row,
you may move to either index i or index i + 1 on the next row.

Example 1:

Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
Output: 11
Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).
Example 2:

Input: triangle = [[-10]]
Output: -10

Approach : Memoization

Time complexity :
      2^(summation of the grid ) its exponential
space complexity :
     O(N) + O(N*N)

class Solution {
public:
  //  int nextBottom;
    int minPath(int i,int j,int m,int n,vector<vector<int>>& triangle,vector<vector<int>> &memo)
    {
        //base case
         if(i==m-1)   // if my row gets bounce of the array 
         {
            return triangle[i][j];
         }
         
         if(memo[i][j]!=-1)  return memo[i][j];
         //boundary conditions
        //  if(j>n)  return 1e9;
        //  if(i>m)  return 1e9;
         int bottom = triangle[i][j]+minPath(i+1,j,m,n,triangle,memo);
       //  if(j<=n-1)
         int  nextBottom = triangle[i][j]+minPath(i+1,j+1,m,n,triangle,memo);

         return memo[i][j]=min(bottom,nextBottom);
          
    }
    int minimumTotal(vector<vector<int>>& triangle) {
        int m=triangle.size();
        int n=triangle[0].size();
      //  return n;
       // vector<vector<int>> memo;
    //   for(int i=0;i<m;i++)
    //   {
    //      int size=triangle[i].size();
    //     for(int j=0;j<size;j++)
    //     {
    //            memo[i][j]=-1;
    //     }
    //   }
        vector<vector<int>> memo (m,vector<int>(m,-1));
   // return n;
        return minPath(0,0,m,n,triangle,memo);
    }
};


// bottom up 

// top down 

//     1

//    4 4
//     i
//   4 5 6
//    i-1 i
//     i i+1
// 1 2 3  4 
//        i
// you may move to either index i or index i + 1 on the next row.

